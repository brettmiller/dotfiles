fpath=(${HOMEBREW_PREFIX}/share/zsh-completions "${HOME}/.zsh.d/zsh-completions" /usr/share/zsh/vendor-completions $fpath)

# enables python argcomplete globally or by adding to fpath in ~/.zshenv if global fails
# below fails if first needs to install/update and it asked to proceed [y/N]. So, just do
# the second part (after ||).
#( activate-global-python-argcomplete || activate-global-python-argcomplete --user --yes ) 2>/dev/null
( activate-global-python-argcomplete --user --yes ) 2>/dev/null

mkdir -p ${HOME}/.zsh.d/zsh-completions

# completions from Homebrew installed commands
if type brew &>/dev/null; then
  FPATH=${HOMEBREW_PREFIX}/share/zsh/site-functions:$FPATH
fi

# don't expand aliases _before_ completion has finished
unsetopt complete_aliases

autoload -U compinit
compinit

# ignore completions for commands that don't exist
zstyle ':completion:*:functions' ignored-patterns '_*'

## Let oh-my-zsh kubectl plugin handle completions, actually no, it doesn't update completions
## completions for `kubectl`
#compdef k=kubectl
if command -v kubectl >/dev/null ; then
  source <(kubectl completion zsh)
#complete -F __start_kubectl k
fi

# completions for gh (github cli)
if command -v gh >/dev/null ; then
  #source <(gh completion -s zsh)
  gh completion -s zsh >"${HOME}/.zsh.d/zsh-completions/_gh"
fi

if command -v steampipe > /dev/null ; then
  steampipe completion zsh > "${HOME}/.zsh.d/zsh-completions/_steampipe"
fi

# completions for `berglas`
if command -v berglas >/dev/null ; then
  source <(berglas completion zsh)
fi

# terraform
#complete -o nospace -C ${HOMEBREW_PREFIX}/bin/terraform terraform
# us terraform that first in path (brew no longer updates terraform)
complete -o nospace -C terraform terraform
# opentofu
complete -o nospace -C ${HOMEBREW_PREFIX}/bin/tofu tofu

# generated with `pip3 completion --zsh`
if command -v pip3 --version > /dev/null ; then
  source <(pip3 completion --zsh)
fi

# 1password-cli completions
if command -v op >/dev/null ; then
  op completion zsh > ${HOME}/.zsh.d/zsh-completions/_op
  compdef _op op
fi

if command -v glow >/dev/null; then
  glow completion zsh >"${HOME}/.zsh.d/zsh-completions/_glow"
fi

# bash completions - allow bash completions to work and load some w/o zsh equivalents
autoload bashcompinit
bashcompinit

# dummy functions, for some functions from the bash_completion pkg needed by other bash completions
_get_comp_words_by_ref() { :; }
compopt() { :; }
_filedir() { :; }
__ltrim_colon_completions() { :; }

# bolt completion - requires bash_completion
bolt_completions_file=$(find /opt/puppetlabs/ -name bolt_bash_completion.sh 2>/dev/null)
[[ -r $bolt_completions_file ]] && source $bolt_completions_file

# hass-cli completions
if command -v hass-cli >/dev/null ; then
  source <(_HASS_CLI_COMPLETE=zsh_source hass-cli)
fi

# ha-cli completions (Home Assistant cli)
if command -v ha >/dev/null ; then
  source <(ha completion zsh) && compdef _ha ha
fi

# esphome completions (requires python-argcomplete - `brew install python-argcomplete`)
#  this really needs to be run in esphome venv
#if command -v register-python-argcomplete >/dev/null ; then
#  eval "$(register-python-argcomplete esphome)"
#elif command -v register-python-argcomplete3 >/dev/null ; then
#  eval "$(register-python-argcomplete3 esphome)"
#fi

# aws cli completions
if command -v aws_completer > /dev/null ; then
 complete -C '${HOMEBREW_PREFIX}/bin/aws_completer' aws
fi

